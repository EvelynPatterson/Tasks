my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20,nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == FALSE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !== 7
5 !TRUE 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(0)
any(< 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hi", "everyone")
submit()
mad_libs("car", "large", "seatbelt")
submit()
'I' %p% 'love' %p% 'R!'
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(httr)set_config(config(ssl_verifypeer = OL))
library(httr)set_config(config(ssl_verifypeer = 0L))
install.packages(httr)
library(httr)
library("httr")
set_config(config(ssl_verifypeer = 0L))
install.packages("httr")
setwd('~/Desktop/Evolution/Tasks/Task_02')
Data1 <- read.csv("beren.csv" , stringsAsFactors=F)
Data2 <- read.csv("cyrus.csv", stringsAsFactors=F)
write.csv (Data1, 'rawdata.csv' , quote=F)
Data1
head(Data1)
GlargleBrgle <- Data1
head(GlargleBrgle)
length(Data1)
nrow(Data1)
ncol(Data1)
colnames(Data1)
head(Data1)
Data1 [1, ]
Data1 [2, ]
Data1 [1:3,]
Data1 [1:3, 4]
Data1 [1:5, 1:3]
Data1 [257, ]
Feeds <- which(Data1 [,9] == 'bottle')
berenMilk <- Data1 [Feeds ,]
head(berenMilk)
nrow(berenMilk)
Feeds <- which(Data1 [, 'event'] == 'bottle')
Feeds <- which(Data1$event == 'bottle')
dayID <- apply(Data1, 1, function(x) paste(x[1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
Data1$age <- dateID - dateID[which(Data1$event == 'birth')]
head(Data1)
beren2 <- Data1
beren3 <- beren2[order(beren2$age) ,]
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds]~beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds]~beren3$caregiver[Feeds], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
source('plotFxn02b.R')
pdf("r02b-cumulativeMilkByTime.pdf")
length(Data2)
nrow(Data2)
ncol(Data2)
colnames(Data2)
head(Data2)
Data2[1,]
Data2[2, ]
Data2[1:3,]
Data2[1:3,4]
Data2[1:5, 1:3]
Mass <- which(Data2[,9] == 'trait_mass')
cyrusMilk <- Data2[Mass, ]
head(cyrusMilk)
nrow(Data2)
Mass <- which(Data2[,'event'] == 'trait_mass')
Mass <- which(Data2$event=='trait_mass')
dayID <- apply(Data2, 1, function(x) paste(x[1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin="2022-04-12")
Data2$age <- dateID-dateID[which(Data2$event == 'birth')]
head(Data2)
cyrus2 <- Data2
cyrus3 <- cyrus2[order(cyrus2$age), ]
write.csv(cyrus3, 'cyrus_new.csv', quote=F, row.names=FALSE)
Mass <- which(cyrus3$event== 'trait_mass')
avgMilk <- mean(cyrus3$value[Mass])
avgMass <- tapply(cyrus3$value[Mass], cyrus3$age[Mass], mean)
varMass <- tapply(cyrus3$value[Mass], cyrus3$age[Mass], var)
totalMass <- tapply(cyrus3$value[Mass], cyrus3$age[Mass], sum)
numMass <- tapply(cyrus3$value[Mass], cyrus3$age[Mass], length)
cor(cyrus3$value[Mass], cyrus3$age[Mass])
cor.test(cyrus3$value[Mass], cyrus3$age[Mass])
cyrusCor <- cor.test(cyrus3$value[Mass], cyrus3$age[Mass])
summary(cyrusCor)
cyrusANOVA <- aov(cyrus3$value[Mass]~ cyrus3$caregiver[Mass])
boxplot(cyrus3$value[Mass]~ cyrus3$caregiver[Mass], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalMass)), totalMass, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalMass), lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalMass)), totalMass, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalMass), lty=2, col='red')
dev.off()
boxplot(cyrus3$value[Mass]~ cyrus3$caregiver[Mass], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2,0.5,0), tck=-0.01)
plot(as.numeric(names(totalMass)), totalMass, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
boxplot(beren3$value[Feeds]~ beren3$caregiver[Feeds], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
dev.off()
boxplot(beren3$value[Feeds]~ beren3$caregiver[Feeds], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
pdf("exampleplot.pdf")
boxplot(beren3$value[Feeds]~ beren3$caregiver[Feeds], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")
dev.off()
pdf("exampleplot.pdf")#
boxplot(beren3$value[Feeds]~ beren3$caregiver[Feeds], xlab="who gave the bottle", ylab="amount of milk consumed (oz)")#
dev.off()
plot(beren3$value[Mass], beren3$age[Mass], col="green", xlab="Age (days)", ylab="Mass(kg)")
points(cyrus3$age[Mass]/1000, cyrus3$value[Mass], col="red", pch=16, xla="Age in days", ylab="Mass in kg")
points(cyrus3$age[Mass]/1000, cyrus3$value[Mass], col="red", pch=16, xlab="Age in days", ylab="Mass in kg")
title(("Cyrus and Beren Age vs Mass"), xlab="age (days)", ylab="Mass(kg)")
pdf("Cyrus and Beren.pdf")
plot(beren3$value[Mass], beren3$age[Mass], col="green", xlab="Age (days)", ylab="Mass(kg)")#
points(cyrus3$age[Mass]/1000, cyrus3$value[Mass], col="red", pch=16, xlab="Age in days", ylab="Mass in kg")#
title(("Cyrus and Beren Age vs Mass"), xlab="age (days)", ylab="Mass(kg)")
dev.off()
plot(beren3$value[Mass], beren3$age[Mass], col="green", xlab="Age (days)", ylab="Mass(kg)")#
points(cyrus3$age[Mass]/1000, cyrus3$value[Mass], col="red", pch=16, xlab="Age in days", ylab="Mass in kg")#
title(("Cyrus and Beren Age vs Mass"), xlab="age (days)", ylab="Mass(kg)")
beren3$value[Mass]
beren3$age[Mass]
